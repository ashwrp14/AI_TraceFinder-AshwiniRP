# -*- coding: utf-8 -*-
"""Flatfield.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y84W-QrC3c6HSvix5PIaEJqowN9KplS6
"""

from google.colab import drive
drive.mount('/content/drive')

import os
import numpy as np
import matplotlib.pyplot as plt

# Define the base path to your project folder
base_path = '/content/drive/MyDrive/InfosysVirtual'

# List all items in the base path
folders = [f for f in os.listdir(base_path) if os.path.isdir(os.path.join(base_path, f))]

print("Folders inside 'InfosysVirtual':")
for folder in folders:
    print("-", folder)

# Define the base path
base_path = '/content/drive/MyDrive/InfosysVirtual'

# Get all main folders
main_folders = [f for f in os.listdir(base_path) if os.path.isdir(os.path.join(base_path, f))]

print(f"Total main folders in 'InfosysVirtual': {len(main_folders)}\n")

# Loop through each main folder and list its subfolders
for main in main_folders:
    main_path = os.path.join(base_path, main)
    subfolders = [sf for sf in os.listdir(main_path) if os.path.isdir(os.path.join(main_path, sf))]

    print(f"üìÅ {main} ({len(subfolders)} subfolders)")
    for idx, sub in enumerate(subfolders, start=1):
        print(f"   {idx}. {sub}")
    print("-" * 40)

import os

# Define base path
base_path = '/content/drive/MyDrive/InfosysVirtual'

# Walk through all folders recursively
print("üìÅ Full File Inventory (Recursive):\n")

for root, dirs, files in os.walk(base_path):
    # Skip empty folders
    if files:
        relative_path = os.path.relpath(root, base_path)
        print(f"üìÇ Folder: {relative_path} ‚Üí {len(files)} files")

        # Show filenames (limit to first 5 for readability)
        for idx, file in enumerate(files[:5], start=1):
            print(f"   {idx}) {file}")

        if len(files) > 5:
            print(f"   ...and {len(files) - 5} more files")

        print("-" * 40)

import os
import pandas as pd
from PIL import Image

# Path to Flatfield folder
flatfield_path = "/content/drive/MyDrive/InfosysVirtual/Flatfield"

# Collect metadata
metadata = []

for scanner_model in sorted(os.listdir(flatfield_path)):
    scanner_folder = os.path.join(flatfield_path, scanner_model)
    if not os.path.isdir(scanner_folder):
        continue

    for file_name in sorted(os.listdir(scanner_folder)):
        file_path = os.path.join(scanner_folder, file_name)
        if not os.path.isfile(file_path):
            continue

        info = {
            "file_name": file_name,
            "format": None,
            "size": None,
            "mode": None,
            "scanner_model": scanner_model,
            "folder": "Flatfield",
            "path": file_path
        }

        try:
            with Image.open(file_path) as img:
                info["format"] = img.format
                info["size"] = img.size
                info["mode"] = img.mode
        except:
            info["format"] = "Unreadable"

        metadata.append(info)

# Create DataFrame
df_flatfield = pd.DataFrame(metadata)

# Show all rows and columns like your notebook
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)

# Display summary
print(f"‚úÖ Total files scanned: {len(df_flatfield)}")
print(f"‚ùå Unreadable files: {df_flatfield[df_flatfield['format'] == 'Unreadable'].shape[0]}")

# Show full table
df_flatfield

import os
import pandas as pd
import matplotlib.pyplot as plt
from PIL import Image

# Path to Flatfield folder
flatfield_path = "/content/drive/MyDrive/InfosysVirtual/Flatfield"

# Initialize metadata list
metadata = []

# Traverse scanner folders
for scanner_model in sorted(os.listdir(flatfield_path)):
    scanner_folder = os.path.join(flatfield_path, scanner_model)
    if not os.path.isdir(scanner_folder):
        continue

    for file_name in os.listdir(scanner_folder):
        file_path = os.path.join(scanner_folder, file_name)
        if not os.path.isfile(file_path):
            continue

        # Try to read image format
        try:
            with Image.open(file_path) as img:
                img_format = img.format
        except:
            img_format = "Unreadable"

        metadata.append({
            "scanner_model": scanner_model,
            "file_name": file_name,
            "format": img_format
        })

# Create DataFrame
df = pd.DataFrame(metadata)

# --- First Graph: Images per Scanner Model ---
scanner_counts = df['scanner_model'].value_counts().sort_index()
plt.figure(figsize=(10, 6))
scanner_counts.plot(kind='bar', color='skyblue', edgecolor='black')
plt.title("üìä Number of Images per Scanner Model (Flatfield)", fontsize=14)
plt.xlabel("Scanner Model", fontsize=12)
plt.ylabel("Number of Images", fontsize=12)
plt.xticks(rotation=45, ha='right')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# --- Second Graph: Image Format Distribution ---
format_counts = df['format'].value_counts().sort_index()
plt.figure(figsize=(8, 5))
format_counts.plot(kind='bar', color='salmon', edgecolor='black')
plt.title("üñºÔ∏è Image Format Distribution (Flatfield)", fontsize=14)
plt.xlabel("Image Format", fontsize=12)
plt.ylabel("Number of Files", fontsize=12)
plt.xticks(rotation=45, ha='right')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

import os
import cv2
import matplotlib.pyplot as plt

# Paths
flatfield_path = "/content/drive/MyDrive/InfosysVirtual/Flatfield"

# Traverse each scanner folder
for scanner_model in sorted(os.listdir(flatfield_path)):
    scanner_folder = os.path.join(flatfield_path, scanner_model)
    if not os.path.isdir(scanner_folder):
        continue

    # Find first readable image
    sample_image = None
    for file_name in sorted(os.listdir(scanner_folder)):
        file_path = os.path.join(scanner_folder, file_name)
        if not os.path.isfile(file_path):
            continue

        image = cv2.imread(file_path)
        if image is not None:
            sample_image = image
            sample_path = file_path
            break

    if sample_image is None:
        print(f"‚ùå No readable image found in {scanner_model}")
        continue

    # Convert to grayscale
    gray_image = cv2.cvtColor(sample_image, cv2.COLOR_BGR2GRAY)

    # Display side by side
    plt.figure(figsize=(10, 5))
    plt.suptitle(f"Scanner: {scanner_model}", fontsize=14)

    plt.subplot(1, 2, 1)
    plt.imshow(cv2.cvtColor(sample_image, cv2.COLOR_BGR2RGB))
    plt.title("Original")
    plt.axis("off")

    plt.subplot(1, 2, 2)
    plt.imshow(gray_image, cmap="gray")
    plt.title("Grayscale")
    plt.axis("off")

    plt.tight_layout()
    plt.show()

import os
import cv2
import numpy as np
import matplotlib.pyplot as plt

# Input path
flatfield_path = "/content/drive/MyDrive/InfosysVirtual/Flatfield"

# Traverse each scanner folder
for scanner_model in sorted(os.listdir(flatfield_path)):
    scanner_folder = os.path.join(flatfield_path, scanner_model)
    if not os.path.isdir(scanner_folder):
        continue

    print(f"\nüìÅ Scanner Model: {scanner_model}")

    # Process each image (limit to 3 per folder)
    image_files = sorted(os.listdir(scanner_folder))
    count = 0

    for file_name in image_files:
        if count >= 3:
            break

        file_path = os.path.join(scanner_folder, file_name)
        if not os.path.isfile(file_path):
            continue

        image = cv2.imread(file_path)
        if image is None:
            print(f"‚ùå Skipped unreadable file: {file_name}")
            continue

        # Step 1: Grayscale
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

        # Step 2: Resize
        resized = cv2.resize(gray, (256, 256))

        # Step 3: Denoise
        denoised = cv2.GaussianBlur(resized, (5, 5), 0)

        # Step 4: Normalize
        normalized = denoised.astype("float32") / 255.0

        # Step 5: Display all stages
        plt.figure(figsize=(12, 6))
        plt.suptitle(f"{scanner_model} ‚Äî {file_name}", fontsize=14)

        plt.subplot(1, 4, 1)
        plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
        plt.title("Original")
        plt.axis("off")

        plt.subplot(1, 4, 2)
        plt.imshow(gray, cmap="gray")
        plt.title("Grayscale")
        plt.axis("off")

        plt.subplot(1, 4, 3)
        plt.imshow(denoised, cmap="gray")
        plt.title("Denoised")
        plt.axis("off")

        plt.subplot(1, 4, 4)
        plt.imshow(normalized, cmap="gray")
        plt.title("Normalized")
        plt.axis("off")

        plt.tight_layout()
        plt.show()

        count += 1

import os
import cv2
import numpy as np
import pywt
import matplotlib.pyplot as plt

flatfield_path = "/content/drive/MyDrive/InfosysVirtual/Flatfield"
feature_summary = {}

def extract_features(img_gray):
    img_resized = cv2.resize(img_gray, (512, 512))
    img_denoised = cv2.GaussianBlur(img_resized, (5, 5), 0)
    img_normalized = img_denoised.astype(np.float32) / 255.0

    kernel = np.array([[-1, -1, -1],
                       [-1,  8, -1],
                       [-1, -1, -1]])
    high_pass = cv2.filter2D(img_normalized, -1, kernel)

    coeffs2 = pywt.dwt2(img_normalized, 'db1')
    approx, (horiz, vert, diag) = coeffs2

    return high_pass, approx, horiz, vert, diag

# üîÅ Traverse scanner model folders
for scanner in sorted(os.listdir(flatfield_path)):
    scanner_path = os.path.join(flatfield_path, scanner)
    if not os.path.isdir(scanner_path):
        continue

    tif_files = [f for f in os.listdir(scanner_path) if f.lower().endswith(('.tif', '.tiff'))]
    valid_count = 0
    first_preview_done = False

    for fname in tif_files:
        img_path = os.path.join(scanner_path, fname)
        img = cv2.imread(img_path, cv2.IMREAD_UNCHANGED)
        if img is None:
            print(f"‚ö†Ô∏è Skipped unreadable: {img_path}")
            continue

        img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) if len(img.shape) == 3 else img
        hp, approx, horiz, vert, diag = extract_features(img_gray)
        valid_count += 1

        if not first_preview_done:
            titles = ["High-Pass", "Approximation", "Horizontal", "Vertical", "Diagonal"]
            images = [hp, approx, horiz, vert, diag]
            fig, axs = plt.subplots(1, 5, figsize=(20, 4))
            for j in range(5):
                axs[j].imshow(images[j], cmap='gray')
                axs[j].set_title(titles[j])
                axs[j].axis('off')
            plt.suptitle(f"{scanner} ‚Üí {fname}", fontsize=12)
            plt.tight_layout()
            plt.show()
            first_preview_done = True

    feature_summary[scanner] = valid_count

print("\nüìä Feature Extraction Summary for Flatfield:")
for scanner, count in feature_summary.items():
    print(f"{scanner}: {count} images processed")

import os
import cv2
import numpy as np
import pywt
import matplotlib.pyplot as plt

# üìÅ Base path
flatfield_path = "/content/drive/MyDrive/InfosysVirtual/Flatfield"
feature_summary = {}

# üßº Preprocessing
def preprocess_image(img):
    img_resized = cv2.resize(img, (512, 512))
    img_denoised = cv2.GaussianBlur(img_resized, (5, 5), 0)
    img_normalized = img_denoised.astype(np.float32) / 255.0
    return img_normalized

# üîç FFT extraction
def extract_fft(img):
    f = np.fft.fft2(img)
    fshift = np.fft.fftshift(f)
    magnitude_spectrum = 20 * np.log(np.abs(fshift) + 1e-8)
    return magnitude_spectrum

# üîç PRNU extraction
def extract_prnu(img):
    coeffs = pywt.dwt2(img, 'db1')
    cA, (cH, cV, cD) = coeffs
    content = pywt.idwt2((cA, (cH, cV, cD)), 'db1')
    noise = img - content
    prnu = noise / (img + 1e-8)
    return prnu

# üîÅ Traverse scanner model folders
for scanner in sorted(os.listdir(flatfield_path)):
    scanner_path = os.path.join(flatfield_path, scanner)
    if not os.path.isdir(scanner_path):
        continue

    tif_files = [f for f in os.listdir(scanner_path) if f.lower().endswith(('.tif', '.tiff'))]
    valid_count = 0
    first_preview_done = False

    for fname in tif_files:
        img_path = os.path.join(scanner_path, fname)
        img = cv2.imread(img_path, cv2.IMREAD_UNCHANGED)
        if img is None:
            print(f"‚ö†Ô∏è Skipped unreadable: {img_path}")
            continue

        img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) if len(img.shape) == 3 else img
        img_pre = preprocess_image(img_gray)

        fft_img = extract_fft(img_pre)
        prnu_img = extract_prnu(img_pre)

        if not first_preview_done:
            fig, axs = plt.subplots(1, 3, figsize=(15, 4))
            axs[0].imshow(img_pre, cmap='gray')
            axs[0].set_title("Preprocessed")

            axs[1].imshow(fft_img, cmap='gray')
            axs[1].set_title("FFT Spectrum")

            axs[2].imshow(prnu_img, cmap='gray')
            axs[2].set_title("PRNU Residual")

            plt.suptitle(f"{scanner} ‚Üí {fname}", fontsize=12)
            plt.tight_layout()
            plt.show()
            first_preview_done = True

        valid_count += 1

    feature_summary[scanner] = valid_count

print("\nüìä Feature Extraction Summary for Flatfield:")
for scanner, count in feature_summary.items():
    print(f"{scanner}: {count} images processed")

import os
import cv2
import numpy as np
import matplotlib.pyplot as plt

flatfield_path = "/content/drive/MyDrive/InfosysVirtual/Flatfield"
image_counts = {}
histograms = []

# üîÅ Traverse scanner model folders
for scanner in sorted(os.listdir(flatfield_path)):
    scanner_path = os.path.join(flatfield_path, scanner)
    if not os.path.isdir(scanner_path):
        continue

    tif_files = [f for f in os.listdir(scanner_path) if f.lower().endswith(('.tif', '.tiff'))]
    image_counts[scanner] = len(tif_files)

    for fname in tif_files[:2]:  # Preview first 2 for histogram
        img_path = os.path.join(scanner_path, fname)
        img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
        if img is None:
            print(f"‚ö†Ô∏è Skipped unreadable: {img_path}")
            continue

        img_resized = cv2.resize(img, (512, 512))
        hist = cv2.calcHist([img_resized], [0], None, [256], [0, 256])
        histograms.append((f"{scanner} ‚Üí {fname}", hist))

for label, hist in histograms:
    plt.figure(figsize=(6, 3))
    plt.plot(hist, color='gray')
    plt.title(f"Histogram: {label}", fontsize=10)
    plt.xlabel("Pixel Intensity")
    plt.ylabel("Frequency")
    plt.tight_layout()
    plt.show()

labels = list(image_counts.keys())
counts = list(image_counts.values())

plt.figure(figsize=(12, 6))
plt.bar(labels, counts, color='skyblue')
plt.xticks(rotation=45, ha='right')
plt.ylabel("Number of Images")
plt.title("üìä Image Count per Scanner Model (Flatfield)")
plt.tight_layout()
plt.show()

import os
import cv2
import numpy as np
import pywt
from PIL import Image

# üìÅ Input and output paths
flatfield_path = "/content/drive/MyDrive/InfosysVirtual/Flatfield"
output_base = "/content/drive/MyDrive/InfosysVirtual/Flatfield_Features"

# üßº Preprocessing
def preprocess_image(img):
    img_resized = cv2.resize(img, (512, 512))
    img_denoised = cv2.GaussianBlur(img_resized, (5, 5), 0)
    img_normalized = img_denoised.astype(np.float32) / 255.0
    return img_normalized

# üîç FFT extraction
def extract_fft(img):
    f = np.fft.fft2(img)
    fshift = np.fft.fftshift(f)
    magnitude_spectrum = 20 * np.log(np.abs(fshift) + 1e-8)
    return magnitude_spectrum

# üîç PRNU extraction
def extract_prnu(img):
    coeffs = pywt.dwt2(img, 'db1')
    cA, (cH, cV, cD) = coeffs
    content = pywt.idwt2((cA, (cH, cV, cD)), 'db1')
    noise = img - content
    prnu = noise / (img + 1e-8)
    return prnu

# üì¶ Save image as PNG
def save_image(array, path):
    array = np.clip(array * 255, 0, 255).astype(np.uint8)
    Image.fromarray(array).save(path)

# üîÅ Traverse scanner folders
for scanner in sorted(os.listdir(flatfield_path)):
    scanner_path = os.path.join(flatfield_path, scanner)
    if not os.path.isdir(scanner_path):
        continue

    tif_files = [f for f in os.listdir(scanner_path) if f.lower().endswith(('.tif', '._150.tif','.tiff'))]

    for fname in tif_files:
        img_path = os.path.join(scanner_path, fname)
        img = cv2.imread(img_path, cv2.IMREAD_UNCHANGED)
        if img is None:
            print(f"‚ö†Ô∏è Skipped unreadable: {img_path}")
            continue

        img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) if len(img.shape) == 3 else img
        img_pre = preprocess_image(img_gray)
        fft_img = extract_fft(img_pre)
        prnu_img = extract_prnu(img_pre)

        # üìÅ Create output folder
        save_folder = os.path.join(output_base, scanner)
        os.makedirs(save_folder, exist_ok=True)

        # üßæ Save images
        base_name = os.path.splitext(fname)[0]
        save_image(img_pre, os.path.join(save_folder, f"{base_name}_preprocessed.png"))
        save_image(fft_img / np.max(fft_img), os.path.join(save_folder, f"{base_name}_fft.png"))
        save_image(prnu_img / np.max(np.abs(prnu_img)), os.path.join(save_folder, f"{base_name}_prnu.png"))

        print(f"‚úÖ Saved: {scanner}/{fname}")